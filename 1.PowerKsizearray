            int[] sub = Arrays.copyOfRange(nums,i,i + k);  array copy in range


Q1. Find the Power of K-Size Subarrays I
Solved
Medium
4 pt.
You are given an array of integers nums of length n and a positive integer k.

The power of an array is defined as:

Its maximum element if all of its elements are consecutive and sorted in ascending order.
-1 otherwise.
You need to find the power of all 
subarrays
 of nums of size k.

Return an integer array results of size n - k + 1, where results[i] is the power of nums[i..(i + k - 1)].

 

Example 1:

Input: nums = [1,2,3,4,3,2,5], k = 3

Output: [3,4,-1,-1,-1]

Explanation:

There are 5 subarrays of nums of size 3:

[1, 2, 3] with the maximum element 3.
[2, 3, 4] with the maximum element 4.
[3, 4, 3] whose elements are not consecutive.
[4, 3, 2] whose elements are not sorted.
[3, 2, 5] whose elements are not consecutive.
Example 2:

Input: nums = [2,2,2,2,2], k = 4

Output: [-1,-1]

Example 3:

Input: nums = [3,2,3,2,3,2], k = 2

Output: [-1,3,-1,3,-1]

 

Constraints:

1 <= n == nums.length <= 500
1 <= nums[i] <= 105
1 <= k <= n



class Solution {
    public int[] resultsArray(int[] nums, int k) {
          int n = nums.length;
        int[] res = new int[n-k+1];
        
        for (int i=0; i<=n - k;i++) {
            int[] sub = Arrays.copyOfRange(nums,i,i + k);
            if (is(sub)) {
                res[i] = sub[k-1];
            } else {
                res[i]=-1;
            }
        }
        
        return res;
    }

    private static boolean is(int[] sub) {
        for (int i = 1; i < sub.length; i++) {
            if (sub[i] != sub[i - 1] + 1) {
                return false;
            }
        }
        return true;
    }
}



// NOW OPTIMIZED IN o(N)

1.Create array count to store length of consescutive sequences and ans to store final resutl

2.  check in window that if i+k-1  == k ans []= i+k-1 else -1
class Solution {
    public int[] resultsArray(int[] a, int k) {
        int n = a.length;
        int[] cnt = new int[n];
        cnt[0]=1;

        for (int i=1;i<n;i++)
        {
            if (a[i]==a[i-1]+1)
            {
                cnt[i]=cnt[i-1]+1;
            }
            else
            {
                cnt[i]=1;
            }
        }
        int[] ans = new int[n-k+1];
        for (int i=0;i<n-k+1;i++)
        {
            if (cnt[i+k-1]>=k)
            {
                ans[i]=a[i+k-1]; // max of that
            }
            else
            {
                ans[i]=-1;
            }
        }
        return ans;
    }
}
